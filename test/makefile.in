##############################################################################
# Start of Generic Unity test rules
#

# TODO describe how to override recipes with target-specific variables

UNITY           ?= Unity/src/
FFF             ?= fff/
TEST_PATH       ?= test/

TEST_BUILD    	 = build/test/build/
TEST_OBJS     	 = build/test/objs/
TEST_RESULTS  	 = build/test/results/
TEST_RUNNERS  	 = build/test/runners/
TEST_BUILD_PATHS = $(TEST_BUILD) $(TEST_OBJS) $(TEST_RESULTS) $(TEST_RUNNERS)

TEST_RUN_WRAPPER = valgrind -q --track-origins=yes --suppressions=test/valgrind-musl.supp
TEST_CC          = gcc
TEST_LD          = gcc
TEST_CFLAGS      = -I. -DTEST -DUNITY_USE_FLUSH_STDOUT -Wall -Wextra
TEST_LDFLAGS     =

$(TEST_BUILD):
	@mkdir -p $(TEST_BUILD)

$(TEST_OBJS):
	@mkdir -p $(TEST_OBJS)

$(TEST_RESULTS):
	@mkdir -p $(TEST_RESULTS)

$(TEST_RUNNERS):
	@mkdir -p $(TEST_RUNNERS)

$(TEST_RUNNERS)%-runner.c:: $(TEST_PATH)%.c
	@echo 'Generating runner for $@'
	@mkdir -p `dirname $@`
	@ruby $(UNITY)../auto/generate_test_runner.rb $< $@

$(TEST_OBJS)unity.o:: $(UNITY)unity.c $(UNITY)unity.h
	@echo 'Compiling Unity'
	@$(TEST_CC) $(TEST_CFLAGS) -c $< -o $@

$(TEST_OBJS)%.o:: $(TEST_PATH)%.c
	@echo 'Compiling test $<'
	@mkdir -p `dirname $@`
	@$(TEST_CC) $(TEST_CFLAGS) -c $< -o $@

$(TEST_OBJS)%-runner.o: $(TEST_RUNNERS)%-runner.c
	@echo 'Compiling test runner $<'
	@mkdir -p `dirname $@`
	@$(TEST_CC) $(TEST_CFLAGS) -c $< -o $@

$(TEST_RESULTS)%.testresults: $(TEST_BUILD)%.out
	@echo
	@echo "******************************************************************************"
	@echo "*"
	@echo '* ----- Running test $<:'
	@mkdir -p `dirname $@`
	@-sh -c "$(TEST_RUN_WRAPPER) ./$< | tee $@ | sed -e 's/^/* /'" 2>&1
	@echo "*"
	@echo "******************************************************************************"
	@echo

print-summary:
	@echo
	@echo "----- SUMMARY -----"
	@echo "PASS:   `for i in $(TEST_RESULTS); do grep -r -s :PASS $$i; done | wc -l`"
	@echo "IGNORE: `for i in $(TEST_RESULTS); do grep -r -s :IGNORE $$i; done | wc -l`"
	@echo "FAIL:   `for i in $(TEST_RESULTS); do grep -r -s :FAIL $$i; done | wc -l`"
	@echo
	@echo "DONE"
	@if [ "`for i in $(TEST_RESULTS); do grep -r -s FAIL $$i; done | wc -l`" != 0 ]; then \
	exit 1; \
	fi

#
# End of Generic Unity test rules
##############################################################################
